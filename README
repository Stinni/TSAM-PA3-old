SSL Chat Server & Client - Programming Assignment 3 for Computer Networking
University of Reykjavík, autumn 2016
Students: Ágúst Aðalsteinsson & Kristinn Heiðar Freysteinsson
Usernames: agust11 & kristinnf13

---

SSL:

We started with following a guide on how to set up an SSL connection on both server and client.
That guide was provided in the project description.
We had created a key and a certificate with one of the guides that were provided but, even though
those guides helped a bit, we found the guide in the link below of more help:
http://simplestcodings.blogspot.is/2010/08/secure-server-client-using-openssl-in-c.html

That's where we found the command that we used to make the key and cert file that's included in our handin.
"openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mycert.pem -out mycert.pem"

Most of the SSL setup structure and functions were taken from there and also from here:
http://h41379.www4.hpe.com/doc/83final/ba554_90007/ch05s04.html?btnNext=next%C2%A0%EF%BF%BD
and at the bottom of tat page there's a 'prev' link to the client part.

---

Multiple clients:

Besides using the linux manual and other official material on both SSL and the select function,
we found these sources helpful for the select (serving multiple clients) aswell:
http://www.binarytides.com/multiple-socket-connections-fdset-select-linux/
http://stackoverflow.com/questions/26873490/handle-multiple-clients-two-way-communication-using-sockets-in-c

---

Protocol communications:

The protocol itself is very simple. Even thought we had read a bit of the IRC protocol and had this
https://tools.ietf.org/html/rfc2812#section-3.6.1
open the whole time, we didn't use it much.

Every message is a string that starts with either REQUEST or RESPONSE, depending on whether it's the server
or the client that's sending it.

The client sends the following messages to the server for requests:
	- "REQUEST_GAME"
	- "REQUEST_SAYY"
	- "REQUEST_ROLL"
	- "REQUEST_JOIN"
	- "REQUEST_USER"
	- "REQUEST_LIST"
	- "REQUEST_WHOO"

In some requests the client sends a message along with the request, like REQUEST_USER sends the username and password following the request.
The server then checks the first parameter and if it is a REQUEST, then he parses the message as he should.

The others do not need a message like LIST and WHOO, where the server just sends the information when the server can.

The Server response messages are:
	- "RESPONSE_GAME"
	- "RESPONSE_SAYY"
	- "RESPONSE_ROLL"
	- "RESPONSE_JOIN"
	- "RESPONSE_USER"
	- "RESPONSE_LIST"
	- "RESPONSE_WHOO"

Where the server sends the reponse and then the messages in the same message.

---

What was implemented, how it was implemented and what wasn't implemented:

First of all, all communication between the server and the clients go through a SSL connection.

A logger was implemented and is in seperate files, 'logger.h' and 'logger.c' and the files are
of course included in the handin. The Makefile takes care of compiling it.
All clients connecting to the server and disconnecting from it are logged into a file called 'log.txt'
We also included an error logger in the same files which logs error to a file called 'err.txt'

Select is used to be able to handle multiple connections.
All info about each client is kept in a struct that we called ClientInfo. Pointers to each one are kept
in a GTree and special functions were made for iterating through the tree.
The 'usersTree' uses the file descriptors as keys so the extra 'sockaddr_in_cmp' function was removed.

Lists of clients in each chatroom are also kept in a GTree and there're also special functions for the
work needed with those.

A few global variables are kept in both server and client. Those are kept as global variables so that they
can be used in these special functions for the GTree iterations and also so that cleanup can be done when
shutting down either client or server.

A client can update it's username with the '/user' command but we did not get to the authentication part.
Therefore we didn't hash or encrypt the passwords in any way. Passwords are sent to the server and stored
in the ClientInfo struct but it never gets used.
Since the authentication part isn't done, no logging is done for it either.

When a client connects, we decided that they'd get added to a chatroom that we called "Lobby"
Before changing one's username with the '/user' command you're only known on the server as "Anonymous user"
The user can't change the chatroom with the '/join' command unless he or she has changed the username.

We implemented private messages with the '/say' command. Even anonymous users can send private messages.
On the other hand, anonymous users can't recieve private messages.

We did not implement the idle timeouts or the game functionality.

---

Answers to questions:

6.2:
In our case, the passwords are kept as plain text strings in both client and server... :)

7.2:
We had different understanding of logging here.
Logging a private message for a user that isn't logged in so that he or she will recieve it later.
Which sounds good except that it's actually logging a private message on the server. Someone might get hold of a message that's not intended for them.
The second understanding was logging as one sends a message, not the actual message.
That also sounds allright but do we need to or even want to? Do we want to keep track of who's sending messages to whom.
We think that logging of messages should only be in the sense of logging the actual messages and only on the client side.
The client can turn that feature on or off, like in the IRC clients that one of us has used.
Of course, in the perfect world, both parties should have to agree to said logging but we've not seen that done yet with IRC anyway.

---
